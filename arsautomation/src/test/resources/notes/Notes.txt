==============MVN======================
mvn clean  //Cleans the folder
mvn compile    // maven compiles the project/build
mvn spring-boot:run -Dport=9090 //run the app on 9090 port

groupid and artifact id needs to be changed while createing the projet:

mvn archetype:generate -DgroupId=com.sumdev.tax.ars -DartifactId=arsautomation -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false // create project
// create project
mvn archetype:generate -DgroupId=com.learnbybyte.lab -DartifactId=labexercise -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false 


===========
mvn test //Mvn executes unit OR integration tests
mvn package -DskipTests  //Mvn Ignore execution of unit OR integration tests
mvn package -Dmaven.test.skip //Mvn Ignore execution of unit OR integration tests
mvn package // build web apps
mvn install  //deploy project
mvn deploy //deploy project
mvn javadoc:javadoc //Generate java documentation
mvn -X //Debug maven
mvn site //Geneate site
mvn --version //Identify version # of maven
mvn eclipse:eclipse






================JDBC==============
Java Database Connectivity (JDBC): 

In order to connect to db
a) We have mentioned the Driver (Oracle thin)
b) ServerHost = Localhost:
c) ServerPort = Port (1521)
d) service = XE 
e) User id (credentials): arsadmin
 f) password: arsadmin
 
database url: jdbc:oracle:thin:@localhost:1521/XE

2) Open SQL commandar:
3) write Insert query: insert into legal_entity (entity_number,capital_amount,name,Share_count) values ('EN11002',1002,'N-1002',102);
4) execute insert query
-----------------------------
Java :
1. Add oracle driver dependancy in POM.xml 
2. run mvn eclipse:eclipse command, so that elcipse class path is modified and JDBC Driver is added to class path
3. declair 5 attributes/fields: drivername,URL,userid ,Password , connection
4. Load the driver class using class.forname (Class.forName(driverName).newInstance();)
5. Use driver manager to get the database connection (connection = DriverManager.getConnection(arsDBURL, userName, password);)
This creates db connection in memeory 

6. Create statement Object (Statement stmt = connection.createStatement();)
   This step is similar to opening 'sql commander' in db visulizer.
7. Write insert query (insert into legal_entity (entity_number,capital_amount,name,Share_count) values ('EN11021',1021,'N-1021',1021);)
8. Execute the Insert Query (stmt.executeQuery(selectQuery);



  



pom.xml





===============Syllabus============

UML: Class diagram, Objects, Class, Class diagram, sequence diagram, entity diagram,forward engineering (generate java code from UML Diagram)
Core Java: Classes, methods, constructor, collection
GIT / GitKraken: Repository creation, stage, commit, clone, push, gitignore
Advance Java: JDBC
Selenium: https://kindlespark.wiki.zoho.com/selenium.html
Tools: Maven, Eclipse, DB Visulizer, console, explorer ++, GITKraken
SOAPUI:  GUI, Automation
REST = HTTP  methods+ HTTP Error Codes + JSON 
Maven: mvn compile, clean, create empty project / template, eclipse:elciplse, goals (commands), Package
testng:unit test framework:
junit: unit test framework:
XML: XML,xml schema (table structure/class/xsd), xpath (where clause),
Data Generation:fakedata genration
CSV: 
BDD
PAGE OBJECT MODEL
eclipse: debuging
Gradle?
CUCUMBER?
========================================================================================
Json:

=============================================XML========================================
root
element ,/tag /node,: -> synonoms
Parent and child elements:
(entity_number,capital_amount,name,Share_count) values ('EN11002',1002,'N-1002',102)

<Name>Kindlespark</Name>
<ShareCount>1002</ShareCount>
===================================OOPs======================================
Class/Type/table/Blue print/structure/Entity/parvat 
Object/row/himalya/instance/
Atributes/Properties/fields/column/noun
Behaviour/methods/functions/opertations/stoed proced(SP)/verb/action
Inheritance/Classification/speicilization/


Doctor is SuperClass of Gynac and ENT doctor classes 
Doctor is supertype of Gynac and ENT doctor type
Doctor is Parent class of Gynac and ENT child class
Dcotor is Generalizeion of Gynac and ENT
Dcotor us Generalizetion of Gynac and ENT
Gynac and ENT are specilization of Doctor
In Java Gynac class is extends from Doctor Class




IS releationship
smelltest: Is Engineering student a student?
Is tailor a proffession?



Byke: color, #of wheels, RTO #
behaviour:start,stop,break, excellerate,

Student:

SuperClass/Parent/type/supertype/Baseclass

Super/Parent/base
Derived/child/sub

Interface are a contract/agreement
Interface declairs capabilities

WebDriver wd = new WebDriver() -> Wrong, it will not compile
WebDriver wd = new ChromWebDriver() -> Correct

wd.get()
wd.findBy()


LegalEntityRepository lerepo = new LegalEnitityRepository() ->incorrect (for example)


--------------------------
ILegalEntityRepository lerepo = new LegalEnititySybaseRepository() ->correct (for example)
lerepo.insert()
lerepo.delete()
lerepo.update
------------------------
Usage of Factory:
------------------
ILegalEntityRepository lerepo = LegalEnitityRepositoryFactory.getLegalEntityRepository() ->correct (for example)
lerepo.insert()
lerepo.delete()
lerepo.update




entity_number,capital_amount,name,Share_count

Input Parameters are equivalent to values given in the Insert statement (fields and values)
where clause = input parameter

return type = Display
Select count(*) from legal_entity;

public int findLegalEntityCount()
{
rerurn int
}


================================================

balance +=amount;






